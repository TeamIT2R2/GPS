#include "Driver_USART.h"               // ::CMSIS Driver:USART
#include "Board_GLCD.h"                 // ::Board Support:Graphic LCD
#include "GLCD_Config.h"                // Keil.MCB1700::Board Support:Graphic LCD
#include "cmsis_os.h"                   // ARM::CMSIS:RTOS:Keil RTX
#include "osObjects.h"
#include "stdio.h"

extern ARM_DRIVER_USART Driver_USART1;
extern GLCD_FONT GLCD_Font_6x8;
extern GLCD_FONT GLCD_Font_16x24;
osThreadId ID_Tache1;
osThreadId ID_Tache2;
osThreadId ID_Tache3;
uint8_t tab[80];

int StringToint(uint8_t * string,int taille){
int num=0,i;
uint8_t *ptr=string;
	
	for(i=0;i<taille;i++){
	num = 10*num+(*ptr-'0');
	ptr++;
	}
return num;
}

void event_UART(uint32_t event)
{
	switch (event) {
		
		case ARM_USART_EVENT_RECEIVE_COMPLETE : 	osSignalSet(ID_Tache1, 0x01);
																							break;
		
		case ARM_USART_EVENT_SEND_COMPLETE  : 	osSignalSet(ID_Tache2, 0x01);
																							break;
		
		default : break;
	}
}

void Tache1(void const *argument)
{
	char tex[1];
	int i,j;
	while(1){
		Driver_USART1.Receive(tex,1);
		while(Driver_USART1.GetRxCount()<1);
		if(tex[0]=='$')
		{		
				for(i=0;i<80;i++){tab[i]=0;}
				j=1;
				tab[0]='$';
		}
		else{
			tab[j]=tex[0];
			j++;
		}

		}
}
	
void Tache2(void const *argument)
{
int i,j,k;
char speed[10],course[10];
while(1)
	{
		GLCD_DrawString(1,10,tab);
	}
}

void Tache3(void const *argument)
{
osDelay(osWaitForever);
		while(1)
		{
			
		
		}
}

void Init_UART(void){
	Driver_USART1.Initialize(cb_event);
	Driver_USART1.PowerControl(ARM_POWER_FULL);
	Driver_USART1.Control(	ARM_USART_MODE_ASYNCHRONOUS |
							ARM_USART_DATA_BITS_8		|
							ARM_USART_STOP_BITS_1		|
							ARM_USART_PARITY_NONE		|
							ARM_USART_FLOW_CONTROL_NONE,
							9600);
	Driver_USART1.Control(ARM_USART_CONTROL_TX,1);
	Driver_USART1.Control(ARM_USART_CONTROL_RX,1);
}

osThreadDef(Tache1,osPriorityNormal,1,0);
osThreadDef(Tache2,osPriorityNormal,1,0);
osThreadDef(Tache3,osPriorityNormal,1,0);

int main (void){
	osKernelInitialize ();
	GLCD_Initialize();
	GLCD_ClearScreen();
	GLCD_SetFont(&GLCD_Font_16x24);
	Init_UART();
	
	ID_Tache1 = osThreadCreate (osThread(Tache1), NULL);
	ID_Tache2 = osThreadCreate (osThread(Tache2), NULL);
	ID_Tache3 = osThreadCreate (osThread(Tache3), NULL);

  osKernelStart ();  	// start thread execution 
	osDelay(osWaitForever);
	return 0;
}
